{"ast":null,"code":"import Moment from 'moment/moment'; // exports a function that takes an access token as argument.\n\nexport async function callForUser(accessToken) {\n  //calls an api with the header and method of call attached:\n  const headers = new Headers();\n  const bearer = `bearer ${accessToken}`;\n  headers.append(\"Authorization\", bearer);\n  const time = Moment().format('LLL');\n  const options = {\n    method: \"GET\",\n    headers: headers\n  }; //endpoint points to, users ordered by name, and returns each user with accountEnabled, start, end, name, email as elements within the objects.\n\n  const endpoint = \"https://graph.microsoft.com/v1.0/users?$orderby=displayName&$select=accountEnabled,start,end,displayName,userPrincipalName&$top=999\"; //returns the api response\n\n  return fetch(endpoint, options).then(response => response.json()).catch(error => console.log(error));\n} // exports funciton that takes an acess token, a user and the accountEnabled bool. \n\nexport async function callForEvent(accessToken, user) {\n  const headers = new Headers();\n  const bearer = `bearer ${accessToken}`;\n  headers.append(\"Authorization\", bearer);\n  const options = {\n    method: \"GET\",\n    headers: headers\n  }; //points to a users events, ordered by start time and end time - and only returns the top 2 results.\n\n  const endpoint = `https://graph.microsoft.com/v1.0/users/${user}/events?$orderby=start/dateTime,end/dateTime%20asc&$filter=start/dateTime%20ge%20'2022-09-19T11:00'&$top=2`;\n  return fetch(endpoint, options).then(response => {\n    //reponse.ok returns a boolean based on wether the response was successful or not..\n    if (response.ok) {\n      //console.log('it returned successfully. V');\n      return response.json();\n    } else {\n      //console.log('it did not return successfully!');\n      return false;\n    }\n  });\n}","map":{"version":3,"names":["Moment","callForUser","accessToken","headers","Headers","bearer","append","time","format","options","method","endpoint","fetch","then","response","json","catch","error","console","log","callForEvent","user","ok"],"sources":["C:/Users/ljs/calendar/src/components/DataCollection/GraphCalls.jsx"],"sourcesContent":["import Moment from 'moment/moment';\r\n// exports a function that takes an access token as argument.\r\nexport async function callForUser(accessToken){\r\n    //calls an api with the header and method of call attached:\r\n    const headers = new Headers();\r\n    const bearer = `bearer ${accessToken}`;\r\n    headers.append(\"Authorization\", bearer);\r\n    const time = Moment().format('LLL')\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: headers\r\n    };\r\n    //endpoint points to, users ordered by name, and returns each user with accountEnabled, start, end, name, email as elements within the objects.\r\n    const endpoint = \"https://graph.microsoft.com/v1.0/users?$orderby=displayName&$select=accountEnabled,start,end,displayName,userPrincipalName&$top=999\";\r\n    \r\n    //returns the api response\r\n    return fetch(endpoint, options)\r\n        .then(response => response.json())\r\n        .catch(error => console.log(error))\r\n}\r\n\r\n// exports funciton that takes an acess token, a user and the accountEnabled bool. \r\nexport async function callForEvent(accessToken, user){\r\n    const headers = new Headers();\r\n    const bearer = `bearer ${accessToken}`;\r\n    headers.append(\"Authorization\", bearer);\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: headers\r\n    };\r\n\r\n    //points to a users events, ordered by start time and end time - and only returns the top 2 results.\r\n    const endpoint = `https://graph.microsoft.com/v1.0/users/${user}/events?$orderby=start/dateTime,end/dateTime%20asc&$filter=start/dateTime%20ge%20'2022-09-19T11:00'&$top=2`;\r\n        return fetch(endpoint, options)\r\n        .then(response => {\r\n            //reponse.ok returns a boolean based on wether the response was successful or not..\r\n            if(response.ok){\r\n                //console.log('it returned successfully. V');\r\n                return response.json();\r\n            } else {\r\n                //console.log('it did not return successfully!');\r\n                return false;\r\n            }})\r\n    }\r\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB,C,CACA;;AACA,OAAO,eAAeC,WAAf,CAA2BC,WAA3B,EAAuC;EAC1C;EACA,MAAMC,OAAO,GAAG,IAAIC,OAAJ,EAAhB;EACA,MAAMC,MAAM,GAAI,UAASH,WAAY,EAArC;EACAC,OAAO,CAACG,MAAR,CAAe,eAAf,EAAgCD,MAAhC;EACA,MAAME,IAAI,GAAGP,MAAM,GAAGQ,MAAT,CAAgB,KAAhB,CAAb;EAEA,MAAMC,OAAO,GAAG;IACZC,MAAM,EAAE,KADI;IAEZP,OAAO,EAAEA;EAFG,CAAhB,CAP0C,CAW1C;;EACA,MAAMQ,QAAQ,GAAG,qIAAjB,CAZ0C,CAc1C;;EACA,OAAOC,KAAK,CAACD,QAAD,EAAWF,OAAX,CAAL,CACFI,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADf,EAEFC,KAFE,CAEIC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAFb,CAAP;AAGH,C,CAED;;AACA,OAAO,eAAeG,YAAf,CAA4BlB,WAA5B,EAAyCmB,IAAzC,EAA8C;EACjD,MAAMlB,OAAO,GAAG,IAAIC,OAAJ,EAAhB;EACA,MAAMC,MAAM,GAAI,UAASH,WAAY,EAArC;EACAC,OAAO,CAACG,MAAR,CAAe,eAAf,EAAgCD,MAAhC;EAEA,MAAMI,OAAO,GAAG;IACZC,MAAM,EAAE,KADI;IAEZP,OAAO,EAAEA;EAFG,CAAhB,CALiD,CAUjD;;EACA,MAAMQ,QAAQ,GAAI,0CAAyCU,IAAK,4GAAhE;EACI,OAAOT,KAAK,CAACD,QAAD,EAAWF,OAAX,CAAL,CACNI,IADM,CACDC,QAAQ,IAAI;IACd;IACA,IAAGA,QAAQ,CAACQ,EAAZ,EAAe;MACX;MACA,OAAOR,QAAQ,CAACC,IAAT,EAAP;IACH,CAHD,MAGO;MACH;MACA,OAAO,KAAP;IACH;EAAC,CATC,CAAP;AAUH"},"metadata":{},"sourceType":"module"}