{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ljs\\\\calendar\\\\src\\\\components\\\\DataCollection\\\\Request.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { loginRequest } from '../../AuthenticationFolder/authConfig';\nimport { callForUser } from \"./GraphCalls\";\nimport { GetEvent } from \"./GetEvent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function GetUsers(props) {\n  _s();\n\n  //creates an object with instance and accounts that are authenticated.\n  let eventArr = [];\n  const {\n    instance,\n    accounts\n  } = useMsal(); //console.log(currentUser);\n\n  const request = { ...loginRequest,\n    account: accounts[0]\n  }; //uses instance to acquire an access token, and takes out request, and reponds with an access token if one is available.\n\n  instance.acquireTokenSilent(request).then(res => {\n    //Pass the response into an arrow function that calls the callForUser-function and passes the accesstoken as an argument.\n    callForUser(res.accessToken).then(res => {\n      //Pass the reponse from callForUsers into an arrow functio and passes the response, instance and account as arguments.\n      GetEvent(res.value, instance, accounts).then(res => {\n        console.log(res);\n      });\n    });\n  }).catch(e => {\n    //if we cant acquire silently, then we acquire one by popup.\n    instance.acquireTokenPopup(request).then(res => {\n      callForUser(res.accessToken).then(res => {\n        GetEvent(res.value, instance, accounts).then(res => {});\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hej\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(GetUsers, \"dXjh19YPAR1C3Q3VfJSLpkBSILY=\", false, function () {\n  return [useMsal];\n});\n\n_c = GetUsers;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetUsers\");","map":{"version":3,"names":["React","useMsal","loginRequest","callForUser","GetEvent","GetUsers","props","eventArr","instance","accounts","request","account","acquireTokenSilent","then","res","accessToken","value","console","log","catch","e","acquireTokenPopup"],"sources":["C:/Users/ljs/calendar/src/components/DataCollection/Request.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { loginRequest } from '../../AuthenticationFolder/authConfig'\r\nimport { callForUser } from \"./GraphCalls\"\r\nimport { GetEvent } from \"./GetEvent\";\r\n\r\nexport function GetUsers(props){\r\n    //creates an object with instance and accounts that are authenticated.\r\n    let eventArr = [];\r\n    const { instance, accounts } = useMsal();\r\n    //console.log(currentUser);\r\n    const request = {\r\n        ...loginRequest,\r\n        account: accounts[0]\r\n    };\r\n    //uses instance to acquire an access token, and takes out request, and reponds with an access token if one is available.\r\n    instance.acquireTokenSilent(request).then((res) => { //Pass the response into an arrow function that calls the callForUser-function and passes the accesstoken as an argument.\r\n        callForUser(res.accessToken).then((res) => { //Pass the reponse from callForUsers into an arrow functio and passes the response, instance and account as arguments.\r\n            GetEvent(res.value, instance, accounts).then((res) => {\r\n                console.log(res);\r\n            })\r\n        })\r\n    }).catch((e) =>{\r\n    //if we cant acquire silently, then we acquire one by popup.\r\n    instance.acquireTokenPopup(request).then((res) => {\r\n        callForUser(res.accessToken).then((res) => {\r\n            GetEvent(res.value, instance, accounts).then((res) => {\r\n            });\r\n        })\r\n    })\r\n    })\r\n\r\n    return(\r\n        <>\r\n        <h1>hej</h1>\r\n        </>\r\n    )\r\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,QAAT,QAAyB,YAAzB;;;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;EAAA;;EAC3B;EACA,IAAIC,QAAQ,GAAG,EAAf;EACA,MAAM;IAAEC,QAAF;IAAYC;EAAZ,IAAyBR,OAAO,EAAtC,CAH2B,CAI3B;;EACA,MAAMS,OAAO,GAAG,EACZ,GAAGR,YADS;IAEZS,OAAO,EAAEF,QAAQ,CAAC,CAAD;EAFL,CAAhB,CAL2B,CAS3B;;EACAD,QAAQ,CAACI,kBAAT,CAA4BF,OAA5B,EAAqCG,IAArC,CAA2CC,GAAD,IAAS;IAAE;IACjDX,WAAW,CAACW,GAAG,CAACC,WAAL,CAAX,CAA6BF,IAA7B,CAAmCC,GAAD,IAAS;MAAE;MACzCV,QAAQ,CAACU,GAAG,CAACE,KAAL,EAAYR,QAAZ,EAAsBC,QAAtB,CAAR,CAAwCI,IAAxC,CAA8CC,GAAD,IAAS;QAClDG,OAAO,CAACC,GAAR,CAAYJ,GAAZ;MACH,CAFD;IAGH,CAJD;EAKH,CAND,EAMGK,KANH,CAMUC,CAAD,IAAM;IACf;IACAZ,QAAQ,CAACa,iBAAT,CAA2BX,OAA3B,EAAoCG,IAApC,CAA0CC,GAAD,IAAS;MAC9CX,WAAW,CAACW,GAAG,CAACC,WAAL,CAAX,CAA6BF,IAA7B,CAAmCC,GAAD,IAAS;QACvCV,QAAQ,CAACU,GAAG,CAACE,KAAL,EAAYR,QAAZ,EAAsBC,QAAtB,CAAR,CAAwCI,IAAxC,CAA8CC,GAAD,IAAS,CACrD,CADD;MAEH,CAHD;IAIH,CALD;EAMC,CAdD;EAgBA,oBACI;IAAA,uBACA;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADA,iBADJ;AAKH;;GA/BeT,Q;UAGmBJ,O;;;KAHnBI,Q"},"metadata":{},"sourceType":"module"}