{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ljs\\\\calendar\\\\src\\\\components\\\\DataCollection\\\\Request.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { loginRequest } from '../../AuthenticationFolder/authConfig';\nimport { callForUser, callForEvent } from \"./GraphCalls\";\nimport { RenderMeeting } from \"../RenderComponents/RenderMeeting\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function GetEvent(data, instance, accounts) {\n  const request = { ...loginRequest,\n    account: accounts[0]\n  };\n  data.map(user => {\n    instance.acquireTokenSilent(request).then(res => {\n      callForEvent(res.accessToken, user.userPrincipalName, user.accountEnabled).then(res => {\n        if (res.value === undefined || res === false) {} else {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: console.log(\"e\")\n          }, void 0, false);\n        }\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(RenderMeeting, {\n    text: \"hej\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 13\n  }, this);\n}\n_c = GetEvent;\nexport function GetUsers(props) {\n  _s();\n\n  //creates an object with instance and accounts that are authenticated.\n  let eventArr = [];\n  const {\n    instance,\n    accounts\n  } = useMsal(); //console.log(currentUser);\n\n  const request = { ...loginRequest,\n    account: accounts[0]\n  }; //uses instance to acquire an access token, and takes out request, and reponds with an access token if one is available.\n\n  instance.acquireTokenSilent(request).then(res => {\n    //Pass the response into an arrow function that calls the callForUser-function and passes the accesstoken as an argument.\n    callForUser(res.accessToken).then(res => {\n      //Pass the reponse from callForUsers into an arrow functio and passes the response, instance and account as arguments.\n      GetEvent(res.value, instance, accounts);\n    });\n  }).catch(e => {\n    //if we cant acquire silently, then we acquire one by popup.\n    instance.acquireTokenPopup(request).then(res => {\n      callForUser(res.accessToken).then(res => {\n        GetEvent(res.value, instance, accounts).then(res => {\n          console.log(res);\n        });\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hej\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(RenderMeeting, {\n      text: \"hej\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(GetUsers, \"dXjh19YPAR1C3Q3VfJSLpkBSILY=\", false, function () {\n  return [useMsal];\n});\n\n_c2 = GetUsers;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetEvent\");\n$RefreshReg$(_c2, \"GetUsers\");","map":{"version":3,"names":["React","useMsal","loginRequest","callForUser","callForEvent","RenderMeeting","GetEvent","data","instance","accounts","request","account","map","user","acquireTokenSilent","then","res","accessToken","userPrincipalName","accountEnabled","value","undefined","console","log","GetUsers","props","eventArr","catch","e","acquireTokenPopup"],"sources":["C:/Users/ljs/calendar/src/components/DataCollection/Request.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { loginRequest } from '../../AuthenticationFolder/authConfig'\r\nimport { callForUser, callForEvent } from \"./GraphCalls\"\r\nimport { RenderMeeting } from \"../RenderComponents/RenderMeeting\";\r\n\r\nexport function GetEvent(data, instance, accounts){\r\n    const request = {\r\n        ...loginRequest,\r\n        account: accounts[0]\r\n    };  \r\n\r\n        data.map((user) => {\r\n        instance.acquireTokenSilent(request).then((res) => {\r\n                callForEvent(res.accessToken, user.userPrincipalName, user.accountEnabled).then((res) => {\r\n                    if(res.value === undefined || res === false){\r\n                    } else{\r\n                        return (\r\n                            <>\r\n                            {console.log(\"e\")}\r\n                            </>\r\n                        )\r\n                    }\r\n                })\r\n            })\r\n        })\r\n        return(\r\n            <RenderMeeting text=\"hej\"/>\r\n        )\r\n    }\r\n\r\nexport function GetUsers(props){\r\n    //creates an object with instance and accounts that are authenticated.\r\n    let eventArr = [];\r\n    const { instance, accounts } = useMsal();\r\n    //console.log(currentUser);\r\n    const request = {\r\n        ...loginRequest,\r\n        account: accounts[0]\r\n    };\r\n    //uses instance to acquire an access token, and takes out request, and reponds with an access token if one is available.\r\n    instance.acquireTokenSilent(request).then((res) => { //Pass the response into an arrow function that calls the callForUser-function and passes the accesstoken as an argument.\r\n        callForUser(res.accessToken).then((res) => { //Pass the reponse from callForUsers into an arrow functio and passes the response, instance and account as arguments.\r\n            GetEvent(res.value, instance, accounts);\r\n        })\r\n    }).catch((e) =>{\r\n    //if we cant acquire silently, then we acquire one by popup.\r\n    instance.acquireTokenPopup(request).then((res) => {\r\n        callForUser(res.accessToken).then((res) => {\r\n            GetEvent(res.value, instance, accounts).then((res) => {\r\n                console.log(res);\r\n            });\r\n        })\r\n    })\r\n    })\r\n\r\n    return(\r\n        <>\r\n        <h1>hej</h1>\r\n        <RenderMeeting text=\"hej\"/>\r\n        </>\r\n    )\r\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,cAA1C;AACA,SAASC,aAAT,QAA8B,mCAA9B;;;AAEA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA2C;EAC9C,MAAMC,OAAO,GAAG,EACZ,GAAGR,YADS;IAEZS,OAAO,EAAEF,QAAQ,CAAC,CAAD;EAFL,CAAhB;EAKIF,IAAI,CAACK,GAAL,CAAUC,IAAD,IAAU;IACnBL,QAAQ,CAACM,kBAAT,CAA4BJ,OAA5B,EAAqCK,IAArC,CAA2CC,GAAD,IAAS;MAC3CZ,YAAY,CAACY,GAAG,CAACC,WAAL,EAAkBJ,IAAI,CAACK,iBAAvB,EAA0CL,IAAI,CAACM,cAA/C,CAAZ,CAA2EJ,IAA3E,CAAiFC,GAAD,IAAS;QACrF,IAAGA,GAAG,CAACI,KAAJ,KAAcC,SAAd,IAA2BL,GAAG,KAAK,KAAtC,EAA4C,CAC3C,CADD,MACM;UACF,oBACI;YAAA,UACCM,OAAO,CAACC,GAAR,CAAY,GAAZ;UADD,iBADJ;QAKH;MACJ,CATD;IAUH,CAXL;EAYC,CAbD;EAcA,oBACI,QAAC,aAAD;IAAe,IAAI,EAAC;EAApB;IAAA;IAAA;IAAA;EAAA,QADJ;AAGH;KAvBWjB,Q;AAyBhB,OAAO,SAASkB,QAAT,CAAkBC,KAAlB,EAAwB;EAAA;;EAC3B;EACA,IAAIC,QAAQ,GAAG,EAAf;EACA,MAAM;IAAElB,QAAF;IAAYC;EAAZ,IAAyBR,OAAO,EAAtC,CAH2B,CAI3B;;EACA,MAAMS,OAAO,GAAG,EACZ,GAAGR,YADS;IAEZS,OAAO,EAAEF,QAAQ,CAAC,CAAD;EAFL,CAAhB,CAL2B,CAS3B;;EACAD,QAAQ,CAACM,kBAAT,CAA4BJ,OAA5B,EAAqCK,IAArC,CAA2CC,GAAD,IAAS;IAAE;IACjDb,WAAW,CAACa,GAAG,CAACC,WAAL,CAAX,CAA6BF,IAA7B,CAAmCC,GAAD,IAAS;MAAE;MACzCV,QAAQ,CAACU,GAAG,CAACI,KAAL,EAAYZ,QAAZ,EAAsBC,QAAtB,CAAR;IACH,CAFD;EAGH,CAJD,EAIGkB,KAJH,CAIUC,CAAD,IAAM;IACf;IACApB,QAAQ,CAACqB,iBAAT,CAA2BnB,OAA3B,EAAoCK,IAApC,CAA0CC,GAAD,IAAS;MAC9Cb,WAAW,CAACa,GAAG,CAACC,WAAL,CAAX,CAA6BF,IAA7B,CAAmCC,GAAD,IAAS;QACvCV,QAAQ,CAACU,GAAG,CAACI,KAAL,EAAYZ,QAAZ,EAAsBC,QAAtB,CAAR,CAAwCM,IAAxC,CAA8CC,GAAD,IAAS;UAClDM,OAAO,CAACC,GAAR,CAAYP,GAAZ;QACH,CAFD;MAGH,CAJD;IAKH,CAND;EAOC,CAbD;EAeA,oBACI;IAAA,wBACA;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADA,eAEA,QAAC,aAAD;MAAe,IAAI,EAAC;IAApB;MAAA;MAAA;MAAA;IAAA,QAFA;EAAA,gBADJ;AAMH;;GA/BeQ,Q;UAGmBvB,O;;;MAHnBuB,Q"},"metadata":{},"sourceType":"module"}